-- Migration: 0001_init.sql
-- Purpose: Bootstrap Insight Feeder schema on Supabase (Postgres)
-- Notes: Safe to run multiple times (IF NOT EXISTS used where possible)

-- 0) Extensions ---------------------------------------------------------------
create extension if not exists pgcrypto;          -- gen_random_uuid()
create extension if not exists pg_trgm;           -- trigram similarity (optional)

-- Optional extensions â€” guard against insufficient privileges on managed DBs
DO $$ BEGIN
  CREATE EXTENSION IF NOT EXISTS vector;            -- pgvector for embeddings (optional)
EXCEPTION WHEN insufficient_privilege THEN
  RAISE NOTICE 'Skipping vector extension (insufficient privilege)';
END $$;

DO $$ BEGIN
  CREATE EXTENSION IF NOT EXISTS http;              -- net/http helpers (optional)
EXCEPTION WHEN insufficient_privilege THEN
  RAISE NOTICE 'Skipping http extension (insufficient privilege)';
END $$;

DO $$ BEGIN
  CREATE EXTENSION IF NOT EXISTS pg_cron;           -- scheduling (optional)
EXCEPTION WHEN insufficient_privilege THEN
  RAISE NOTICE 'Skipping pg_cron extension (insufficient privilege)';
END $$;

-- 1) Core tables --------------------------------------------------------------
create table if not exists sources (
  id text primary key,
  name text not null,
  homepage text,
  country char(2),
  lang text,
  terms_url text,
  allowed_use text default 'link+snippet',
  canonical_link_required boolean default true,
  created_at timestamptz default now()
);

create table if not exists articles (
  id uuid primary key default gen_random_uuid(),
  source_id text references sources(id),
  url text not null,
  canonical_url text,
  title text,
  snippet text,
  language text,
  published_at timestamptz,
  fetched_at timestamptz default now(),
  content_hash text,
  cluster_id text,
  unique (source_id, content_hash)
);

create table if not exists article_ai (
  id uuid primary key default gen_random_uuid(),
  article_id uuid references articles(id) on delete cascade,
  ai_title text,
  ai_summary text,
  ai_details text,
  ai_language text,
  model text,
  prompt_hash text,
  created_at timestamptz default now(),
  is_current boolean default true
);
create index if not exists idx_article_ai_current on article_ai(article_id, is_current);

create table if not exists media_assets (
  id text primary key,
  origin text check (origin in ('publisher','stock','ai_generated')),
  url text,
  storage_path text,
  width int, height int,
  caption text, alt text,
  license text, attribution text,
  hash text
);

create table if not exists article_media (
  article_id uuid references articles(id) on delete cascade,
  media_id text references media_assets(id),
  role text,               -- 'thumbnail','hero','inline'
  position int default 0,
  primary key(article_id, media_id)
);

create table if not exists categories (
  id serial primary key,
  path text unique,
  parent_path text
);

create table if not exists article_categories (
  article_id uuid references articles(id) on delete cascade,
  category_id int references categories(id),
  confidence real check (confidence between 0 and 1),
  primary key(article_id, category_id)
);

create table if not exists places (
  id serial primary key,
  code text unique,
  name text
);

create table if not exists article_places (
  article_id uuid references articles(id) on delete cascade,
  place_id int references places(id),
  confidence real check (confidence between 0 and 1),
  primary key(article_id, place_id)
);

create table if not exists entities (
  id serial primary key,
  name text,
  type text,
  wikidata_id text
);

create table if not exists article_entities (
  article_id uuid references articles(id) on delete cascade,
  entity_id int references entities(id),
  salience real,
  primary key(article_id, entity_id)
);

create table if not exists article_scores (
  article_id uuid primary key references articles(id) on delete cascade,
  score real,
  factors jsonb,
  updated_at timestamptz default now()
);

create table if not exists article_policy (
  article_id uuid primary key references articles(id) on delete cascade,
  display_source_link boolean default true,
  max_extract_chars int default 0,
  copyright_zone text,
  robots_ok boolean,
  terms_ok boolean
);

create table if not exists projects (
  id uuid primary key default gen_random_uuid(),
  slug text unique not null,
  description text,
  locale text
);

create table if not exists project_rules (
  project_id uuid references projects(id) on delete cascade,
  include_paths text[],
  exclude_paths text[],
  geo_scope text[],
  boosts jsonb,
  primary key(project_id)
);

create table if not exists feeds (
  id uuid primary key default gen_random_uuid(),
  source_id text references sources(id),
  url text not null,
  kind text check (kind in ('rss','atom','api')) not null,
  country char(2),
  lang text,
  section text,
  schedule_cron text default '*/5 * * * *',
  enabled boolean default true,
  last_etag text,
  last_modified text,
  last_seen_at timestamptz
);
create index if not exists idx_feeds_enabled on feeds(enabled);

create table if not exists crawl_log (
  id bigint generated always as identity primary key,
  feed_id uuid references feeds(id),
  article_url text,
  status text,
  message text,
  created_at timestamptz default now()
);

-- 2) Indexes -----------------------------------------------------------------
create index if not exists idx_articles_pub on articles(published_at desc);
create index if not exists idx_articles_source_hash on articles(source_id, content_hash);
create index if not exists idx_article_categories_cat on article_categories(category_id);
create index if not exists idx_article_places_place on article_places(place_id);
-- Add vector embedding column and index only if extension is available
DO $$ BEGIN
  IF EXISTS (SELECT 1 FROM pg_extension WHERE extname='vector') THEN
    ALTER TABLE articles ADD COLUMN IF NOT EXISTS title_embedding vector(384);
    CREATE INDEX IF NOT EXISTS idx_articles_title_vec
      ON articles USING ivfflat (title_embedding vector_cosine_ops);
  END IF;
END $$;

-- 3) Views (public read surface) ---------------------------------------------
create or replace view v_articles_public as
select a.id,
       a.title,
       a.snippet,
       a.published_at,
       a.language,
       coalesce(a.canonical_url, a.url) as url,
       s.name as source_name,
       s.homepage as source_homepage,
       (select jsonb_agg(c.path order by c.path)
          from article_categories ac join categories c on c.id=ac.category_id
         where ac.article_id=a.id) as categories,
       (select score from article_scores where article_id=a.id) as score
  from articles a
  join sources s on s.id=a.source_id;

-- 4) RPCs --------------------------------------------------------------------
create or replace function articles_needing_ai()
returns table (
  id uuid,
  published_at timestamptz,
  language text,
  source_trust real,
  cluster_size int
) language plpgsql as $$
begin
  return query
  select a.id, a.published_at, a.language,
         0.7::real as source_trust,
         1 as cluster_size
    from articles a
   where not exists (select 1 from article_ai x where x.article_id=a.id and x.is_current)
   order by a.published_at desc nulls last
   limit 200;
end; $$;

-- 5) RLS (enable; you will serve via Edge Functions using service role) ------
alter table sources enable row level security;
alter table articles enable row level security;
alter table article_ai enable row level security;
alter table media_assets enable row level security;
alter table article_media enable row level security;
alter table categories enable row level security;
alter table article_categories enable row level security;
alter table places enable row level security;
alter table article_places enable row level security;
alter table entities enable row level security;
alter table article_entities enable row level security;
alter table article_scores enable row level security;
alter table article_policy enable row level security;
alter table projects enable row level security;
alter table project_rules enable row level security;
alter table feeds enable row level security;
alter table crawl_log enable row level security;

-- For v1, DO NOT open public read policies on base tables.
-- Serve read traffic via Edge Functions using the service role key.

-- 6) Seeds -------------------------------------------------------------------
insert into projects (slug, description, locale) values
  ('insight-football','Football-focused news','en-GB'),
  ('insight-london','London local news','en-GB')
on conflict (slug) do nothing;

insert into categories(path,parent_path) values
  ('general', null),
  ('sports', null),
  ('sports.football','sports'),
  ('sports.transfer','sports.football'),
  ('geo', null),
  ('geo.uk','geo'),
  ('geo.uk.london','geo.uk')
on conflict do nothing;

insert into places(code,name) values
  ('gb.london','London'),
  ('tr.istanbul','Istanbul')
on conflict do nothing;

-- 7) Helper comments ---------------------------------------------------------
comment on view v_articles_public is 'Safe, minimal article surface for client apps (use via Edge Functions or PostgREST policies).';
